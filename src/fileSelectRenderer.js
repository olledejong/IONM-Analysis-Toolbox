// inform the Main Process that it has to open a file select window
variable_content.on("click", '.file-selectBtn', function() {
    ipcRenderer.send("select-file", "");
});

/**
 * Receive the information of the selected files via message "selected"
 * and display the filenames ( generated by generateFilenames() )
 * @param {object} IpcRendererEvent, contains all information about the event
 * @param {array} Contains the paths of all selected files
 */
ipcRenderer.on("selected", function (event, paths) {
    // jQuery selector(s)
    let run_summarize_button = $(".run-button");
    let file_select_button = $(".file-selectBtn");

    // only do something if there are actually files are selected
    if(paths.length !== 0) {
        let finalFileNames = generateFilenames(paths);

        // set text inside the button to selected files
        file_select_button.html('Selected file(s):<br>' + finalFileNames);

        if ( run_summarize_button.prop('disabled') === true ) {
            run_summarize_button.animate({
                left: '20px', opacity: 1
            }, 800);
        }
        run_summarize_button.prop('disabled', false);

        // disable run button when file selection cancelled
    } else {
        file_select_button.html('Select file(s)');
        run_summarize_button.animate({
            left: '-130px', opacity: 1
        }, 800);
        run_summarize_button.prop('disabled', true);
    }
});

/**
 * For every absolute path in the given array, this function returns
 * its filename for the purpose of displaying it to the user.
 * @param {string} paths
 * @returns {string} a filename followed by a html linebreak
 */
function generateFilenames(paths) {
    let fileNameString = []; let i;
    for (i = 0; i < paths.length; i++) {
        let lastIndex = paths[i].lastIndexOf('\\');
        let substring = paths[i].substring((lastIndex + 1), paths[i].length);
        fileNameString.push(substring);
    }
    return fileNameString.join("<br>");
}