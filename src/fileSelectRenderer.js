// set the start path of the file select window
defaultDatabasePath = "D:\\Menno\\NimEclipse\\NS\\test";

// inform the Main Process that it has to open a file select window
variable_content.on("click", '.csv-select-btn', function() {
    // configure which types of files are allowed
    let types = [
        {name: 'Only extensions allowed:', extensions: ['csv', 'xlsx'] }
    ];
    // configure the options (allowed types + properties)
    const options = {
        title: 'Select file(s)',
        filters: types,
        defaultPath: "D:\\Menno\\NimEclipse",
        properties: ['openFile', "multiSelections"]
    };
    ipcRenderer.send("select-file", options);
});


/**
 * Receive the information of the selected files via message "selected"
 * and display the filenames ( generated by generateFilenames() )
 * @param {object} IpcRendererEvent, contains all information about the event
 * @param {array} Contains the paths of all selected files
 */
ipcRenderer.on("selected", function (event, paths) {
    // jQuery selector(s)
    let run_button = $(".run-button");
    let file_select_button = $(".csv-select-btn");
    let selected_filenames_p = $('#selected-filenames');

    // only do something if there are actually files are selected
    if(paths.length !== 0) {
        let finalFileNames = generateFilenames(paths);

        selected_filenames_p.css({
            'position' : 'relative',
            'left' : '0',
            'top' : '0',
            'margin': '8px 0 8px 15px',
            'transform': 'none',
        });
        // set text inside the button to selected files
        selected_filenames_p.html(finalFileNames);

        // show run button and enable it
        if ( run_button.prop('disabled') === true ) {
            run_button.css({
                'right': '0',
                'opacity' : '1'
            });
        }
        run_button.prop('disabled', false);

    // disable run button when file selection cancelled
    } else {
        selected_filenames_p.css({
            'position' : 'absolute',
            'left' : '50%',
            'top' : '50%',
            'margin': '0',
            'transform': 'translate(-50%, -50%)',
        });
        selected_filenames_p.html('No files selected');
        run_button.css({
            'right': '-100px',
            'opacity' : '0'
        });
        run_button.prop('disabled', true);
    }
});


/**
 * For every absolute path in the given array, this function returns
 * its filename for the purpose of displaying it to the user.
 * @param {string} paths
 * @returns {string} a filename followed by a html linebreak
 */
function generateFilenames(paths) {
    let fileNameList = [];
    // loop through list of filepaths
    for (let i = 0; i < paths.length; i++) {
        let lastIndex = paths[i].lastIndexOf('\\');
        let substring = paths[i].substring((lastIndex + 1), paths[i].length);
        // after every two filenames push a linebreak, but dont do this for the first element
        fileNameList.push(substring);
        fileNameList.push('<br>');
    }
    return fileNameList.join('');
}